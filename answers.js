1. A design patter is a general reusable solution to an occurring problem in software design. It can also be described as a blueprint to handle recurring problems in software development. 
2. First of all if you know your deign patterns it greatly enhances your performance and efficiency as a programmer. But also in knowing the vocabulary it would help you describe better your code and solutions to other programmers. For example you won’t have to say " I used a while loop to initialize a function” you could say “ I used a factory pattern to create functions”
3.  As I said before having knowledge of design patterns it’s tremendously helpful in your career as a programmer. By knowing them your skill will improve greatly and you could tackle real life problems because knowing design patterns makes your extremely efficient. By using them you can avoid repetition, make your code run faster and have the ability to make changes later on without much difficulty.
4. A design patter is basically a guideline; in programming there’s no wrong or right you can achieve the same result by doing things differently. But in doing so doesn’t guarantee your program will be efficient. So it’s a guideline in terms that you can follow it to achieve recurring problems that you would encounter in software design. You don’t have to use them but in doing so it will save you time and resources.
5. I admit is my programming skills are lacking at best but by knowing design patterns it has allow me to become aware that I don’t have to bust my head trying to figure out a solution for a certain problem. Somebody has already done it and I can use that knowledge to improve my code and come up with a solution for a problem. Also knowing design patterns has improve my knowledge and vocabulary as a programmer I’m able to understand a describe code better.
6. Factory is a creational design pattern it differs from the other patterns in its category is that it doesn't explicitly require us use a constructor. The essence of this pattern is to define an interface for creating an object, that way the user doesn’t have to worry about repetition and can improve efficiency. So by using a factory pattern you can create objects without the need to repeat yourself.
7. Observer is a behavioral design pattern where an object maintains a list of objects depending on it (also called observers) and automatically notifies them of any changes. It’s useful to keep track of any code that changes and response to those changes. Finally it also maintains a list of its dependents, called observers, and notifies them automatically of any state changes.
8. A decorator is a structural design pattern incites code reusability and is a flexible alternative to using sub-classing. It allows the user to modify existing objects without the need to change the underlying code structure. A decorator also allows adding functionality or features later on; so it lets the user add stuff as he sees fit without the need to modify the entire code structure. 
9. A singleton is a creational pattern focuses on the instantiation of a class to a single object. In the event of the instance already existing, it simply returns a reference to that object. It differs from a static class because the user can delay its initiation because they require some information that may not be available during initialization time. So a singleton is useful to for designing code that doesn’t need to have a value at the beginning (initialization).
10. A constructor is a creational design pattern hence the name pattern creates objects to be used by functions both locally and globally. It has some drawbacks because it needs a constructor hence the name to initialize the function. 
11. A prototype is a creational design pattern it allows an object to create customized objects without knowing their class or any details of how to create them. As javacript is a classless language you could use prototypes to create objects or classes without the need to know any details about its creation.
12. A pub-sub is a behavioral design pattern and it’s similar to the observer pattern but the difference is that it tries to avoid dependencies between subscriber and publisher.
13. A fly-weight is a structural design pattern it minimizes memory use by sharing as much data as possible with other similar objects. It’s a software design solution for optimizing code that is repetitive, slow and inefficiently.  It shares data and thus makes the application run faster and efficiently.
